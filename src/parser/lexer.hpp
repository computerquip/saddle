// C:/Users/computerquip/tools/msys64/home/computerquip/saddle/src/parser/lexer.hpp generated by reflex 3.2.12 from C:/Users/computerquip/tools/msys64/home/computerquip/saddle/src/parser/lexer.l

#ifndef REFLEX_C__USERS_COMPUTERQUIP_TOOLS_MSYS64_HOME_COMPUTERQUIP_SADDLE_SRC_PARSER_LEXER_HPP
#define REFLEX_C__USERS_COMPUTERQUIP_TOOLS_MSYS64_HOME_COMPUTERQUIP_SADDLE_SRC_PARSER_LEXER_HPP
#define IN_HEADER 1
#define REFLEX_VERSION "3.2.12"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#undef REFLEX_OPTION_YYLTYPE
#undef REFLEX_OPTION_YYSTYPE
#undef REFLEX_OPTION_bison_cc
#undef REFLEX_OPTION_bison_cc_namespace
#undef REFLEX_OPTION_bison_cc_parser
#undef REFLEX_OPTION_bison_complete
#undef REFLEX_OPTION_bison_locations
#undef REFLEX_OPTION_freespace
#undef REFLEX_OPTION_full
#undef REFLEX_OPTION_header_file
#undef REFLEX_OPTION_lex
#undef REFLEX_OPTION_lexer
#undef REFLEX_OPTION_namespace
#undef REFLEX_OPTION_outfile
#undef REFLEX_OPTION_tabs
#undef REFLEX_OPTION_token_eof
#undef REFLEX_OPTION_token_type
#undef REFLEX_OPTION_unicode

#define REFLEX_OPTION_YYLTYPE             saddle::location
#define REFLEX_OPTION_YYSTYPE             saddle::parser::semantic_type
#define REFLEX_OPTION_bison_cc            true
#define REFLEX_OPTION_bison_cc_namespace  saddle
#define REFLEX_OPTION_bison_cc_parser     parser
#define REFLEX_OPTION_bison_complete      true
#define REFLEX_OPTION_bison_locations     true
#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_full                true
#define REFLEX_OPTION_header_file         "C:/Users/computerquip/tools/msys64/home/computerquip/saddle/src/parser/lexer.hpp"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               lexer
#define REFLEX_OPTION_namespace           saddle
#define REFLEX_OPTION_outfile             "C:/Users/computerquip/tools/msys64/home/computerquip/saddle/src/parser/lexer.cpp"
#define REFLEX_OPTION_tabs                4
#define REFLEX_OPTION_token_eof           saddle::parser::symbol_type(0, location())
#define REFLEX_OPTION_token_type          saddle::parser::symbol_type
#define REFLEX_OPTION_unicode             true

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 12 "C:/Users/computerquip/tools/msys64/home/computerquip/saddle/src/parser/lexer.l"

#include "parser.hpp"
#include "location.hpp"
#include "base64.hpp"

#include <ctime>


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace saddle {

class lexer : public reflex::AbstractLexer<reflex::Matcher> {
#line 20 "C:/Users/computerquip/tools/msys64/home/computerquip/saddle/src/parser/lexer.l"

    std::tm time{};
    std::string tmp_str;
    base64::decoder b64_decoder;

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  lexer(
      // a persistent source of input, empty by default
      const reflex::Input& input = reflex::Input(),
      // optional output stream, std::cout by default
      std::ostream& os = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  static const int ESC_STR = 1;
  static const int SCOMMENT = 2;
  static const int STR_NEXT_LINE = 3;
  static const int BASE64 = 4;
  std::string filename;
  // bison-complete bison-locations: location() returns lexeme location
  virtual saddle::location location(void)
  {
    saddle::location yylloc;
    yylloc.begin.filename = &filename;
    yylloc.begin.line = static_cast<unsigned int>(matcher().lineno());
    yylloc.begin.column = static_cast<unsigned int>(matcher().columno() + 1);
    yylloc.end.filename = &filename;
    yylloc.end.line = static_cast<unsigned int>(matcher().lineno_end());
    yylloc.end.column = static_cast<unsigned int>(matcher().columno_end() + 2);
    return yylloc;
  }
  // the bison-complete lexer function defined by SECTION 2
  virtual saddle::parser::symbol_type lex(void);
};

} // namespace saddle

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON C++                                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#endif
